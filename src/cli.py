import os
import sys
import subprocess
import yaml
import click
from rich.console import Console
from rich.panel import Panel
from .docker_manager import DockerManager
from .nginx_manager import NginxManager
from .git_manager import GitManager
from .ssh_manager import SSHManager
from .webhook import run_webhook

console = Console()

def load_config(cfg_path="deploy.yaml"):
    if not os.path.exists(cfg_path):
        console.print("[bold red]deploy.yaml not found. Run `init` first.[/bold red]")
        sys.exit(1)
    with open(cfg_path, "r", encoding="utf-8") as f:
        return yaml.safe_load(f)

@click.group()
def app():
    """DevOps Auto-Deployer CLI"""
    pass

@app.command()
def init():
    """Create starter deploy.yaml and copy templates if missing"""
    created = []
    if not os.path.exists("deploy.yaml"):
        with open("deploy.yaml","w",encoding="utf-8") as f:
            f.write(\"\"\"project_name: TaskManagerPro
frontend:
  repo: https://github.com/user/task-manager-client.git
  port: 3000
  build_context: frontend
  env_file: .env.frontend
backend:
  repo: https://github.com/user/task-manager-server.git
  port: 5000
  build_context: backend
  env_file: .env.backend
nginx:
  domain: myapp.local
  email: admin@myapp.local
paths:
  workdir: ./_workdir
\"\"\")
        created.append("deploy.yaml")
    os.makedirs("templates", exist_ok=True)
    templates = {
        "templates/Dockerfile.frontend": \"\"\"# Template Dockerfile for React (Vite) frontend
FROM node:20-alpine AS build
WORKDIR /app
COPY . .
RUN npm ci || npm install && npm run build

FROM nginx:alpine
COPY --from=build /app/dist /usr/share/nginx/html
EXPOSE 3000
CMD [ "nginx", "-g", "daemon off;" ]
\"\"\",
        "templates/Dockerfile.backend": \"\"\"# Template Dockerfile for Node.js (Express) backend
FROM node:20-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci || npm install
COPY . .
ENV PORT=5000
EXPOSE 5000
CMD ["npm","start"]
\"\"\",
        "templates/nginx.conf": \"\"\"# Generated by DevOps Auto-Deployer
user  nginx;
worker_processes  auto;

events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile        on;
  keepalive_timeout  65;

  server {
    listen 80;
    server_name {{ domain }};

    location / {
      proxy_pass http://frontend:{{ fe_port }};
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
    }

    location /api/ {
      proxy_pass http://backend:{{ be_port }}/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;
    }
  }
}
\"\"\"
    }
    for path, content in templates.items():
        if not os.path.exists(path):
            with open(path,"w",encoding="utf-8") as f:
                f.write(content)
            created.append(path)
    if created:
        console.print(Panel.fit("\\n".join(created), title="Created", border_style="green"))
    else:
        console.print("[yellow]Nothing to create; files already exist.[/yellow]")

@app.command()
def deploy():
    """Build images, generate configs and compose up"""
    cfg = load_config()
    gm = GitManager(cfg)
    dm = DockerManager(cfg)
    nm = NginxManager(cfg)

    gm.ensure_repos()
    nm.generate_nginx()
    dm.generate_compose()
    dm.build_images()
    dm.compose_up()

@app.command()
def update():
    """Pull latest code and rolling-restart services"""
    cfg = load_config()
    gm = GitManager(cfg)
    dm = DockerManager(cfg)

    gm.pull_all()
    dm.compose_up(build=False, force_recreate=False, recreate="smart")

@app.command()
def clean():
    """Stop and remove containers for this project"""
    cfg = load_config()
    dm = DockerManager(cfg)
    dm.compose_down()

@app.command()
def logs():
    """Tail logs of the project"""
    cfg = load_config()
    dm = DockerManager(cfg)
    dm.compose_logs()

@app.command("webhook")
@click.option("--secret", required=True, help="Shared secret to validate webhook payloads")
@click.option("--port", default=9000, help="Webhook server port")
def webhook_cmd(secret, port):
    """Run minimal webhook that triggers `update` on push"""
    run_webhook(secret=secret, port=port)

@app.command("ssh-deploy")
@click.option("--host", required=True)
@click.option("--user", required=True)
@click.option("--key", required=True, help="Path to private key")
@click.option("--workdir", default="~/devops-auto-deployer", help="Remote working directory")
def ssh_deploy(host, user, key, workdir):
    \"\"\"Deploy remotely via SSH: upload repo and run `deploy` on the server.\"\"\"
    cfg = load_config()
    sm = SSHManager(cfg)
    sm.deploy(host=host, user=user, key_path=key, remote_workdir=workdir)
